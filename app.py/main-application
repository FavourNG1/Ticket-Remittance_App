from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask_login import LoginManager, login_user, login_required, logout_user, current_user
from models import db, User, Ticket
from forms import TicketForm, LoginForm
import stripe
import pandas as pd

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://username:password@localhost/ticket_remittance'
db.init_app(app)

login_manager = LoginManager(app)
login_manager.login_view = 'login'

stripe.api_key = "your_stripe_secret_key"

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
@login_required
def index():
    tickets = Ticket.query.all()
    return render_template('ticket_list.html', tickets=tickets)

@app.route('/ticket/new', methods=['GET', 'POST'])
@login_required
def new_ticket():
    form = TicketForm()
    if form.validate_on_submit():
        ticket = Ticket(
            event_name=form.event_name.data,
            purchaser_name=form.purchaser_name.data,
            amount=form.amount.data,
            status='Pending'
        )
        db.session.add(ticket)
        db.session.commit()
        flash('Ticket created successfully!', 'success')
        return redirect(url_for('index'))
    return render_template('ticket_detail.html', form=form)

@app.route('/ticket/<int:id>/remit', methods=['POST'])
@login_required
def remit_ticket(id):
    ticket = Ticket.query.get_or_404(id)
    ticket.status = 'Remitted'
    db.session.commit()
    flash(f'Ticket for {ticket.event_name} remitted successfully!', 'success')
    return redirect(url_for('index'))

@app.route('/pay', methods=['POST'])
@login_required
def pay():
    ticket_id = request.form.get('ticket_id')
    ticket = Ticket.query.get(ticket_id)
    
    # Create a payment intent using Stripe
    intent = stripe.PaymentIntent.create(
        amount=int(ticket.amount * 100),  # amount in cents
        currency='usd',
        payment_method=request.form['payment_method_id'],
        confirmation_method='manual',
        confirm=True,
    )

    # Update ticket status if payment is successful
    if intent.status == 'succeeded':
        ticket.status = 'Paid'
        db.session.commit()
        return jsonify({'success': True})
    else:
        return jsonify({'error': 'Payment failed'}), 400

@app.route('/reports')
@login_required
def reports():
    tickets = Ticket.query.all()
    data = [{
        'Event Name': t.event_name,
        'Purchaser Name': t.purchaser_name,
        'Amount': t.amount,
        'Status': t.status
    } for t in tickets]

    df = pd.DataFrame(data)
    csv_report = df.to_csv(index=False)

    return Response(csv_report, mimetype="text/csv", headers={"Content-disposition": "attachment; filename=ticket_report.csv"})

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.check_password(form.password.data):
            login_user(user)
            return redirect(url_for('index'))
        flash('Invalid username or password')
    return render_template('login.html', form=form)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
